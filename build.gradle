plugins {
    id 'java'
    id "io.qameta.allure" version "2.11.2"
}

group = 'com.omshinde.webautomastery'
version = '1.0.0'

repositories {
    mavenCentral()
}
def aspectJVersion = "1.9.20.1"

// Define configuration for AspectJ agent
configurations {
    agent {
        canBeResolved = true
        canBeConsumed = true
    }
}

dependencies {
    //selenium
    implementation group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '4.19.1'
    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.10.1'


    //lambook
    implementation 'org.projectlombok:lombok:1.18.32'
    annotationProcessor 'org.projectlombok:lombok:1.18.32'

    //testNG
    testImplementation group: 'org.testng', name: 'testng', version: '7.10.1'

    //javafaker
    implementation group: 'com.github.javafaker', name: 'javafaker', version: '1.0.2'

    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'

    //allure
    testImplementation platform("io.qameta.allure:allure-bom:2.24.0")
    testImplementation "io.qameta.allure:allure-testng"
    implementation "org.aspectj:aspectjweaver:$aspectJVersion"
//    implementation('io.qameta.allure:allure-gradle:2.8.1')
    implementation('io.qameta.allure:allure-java-commons:2.14.0')
}

test {
    outputs.upToDateWhen {false}
    systemProperties System.properties
    useTestNG() {
        parallel = "methods"
        threadCount Integer.parseInt(System.getProperty("sessions", "2")); //max num of browser
        includeGroups System.getProperty("tags", "smoke")
        testLogging.showStandardStreams = true
        useDefaultListeners true
        listeners << "com.omshinde.webautomastery.listeners.ScreenshotListeners"
//        outputDirectory = file("$layout.buildDirectory/" + System.getProperty('tags', 'smoke'))
    }
//    useTestNG()
}

allure {
    version = '2.19.0'
    adapter{
        allureJavaVersion.set("2.19.0")
        aspectjVersion.set("1.9.5")

    }
}

task createReportDir() {
    doLast {
        def file = new File(project.projectDir as File, '/allure-report/ui')
        if (!file.exists()) {
            file.mkdirs();
        }
    }
}

task saveHistory(type: Copy) {
    from new File(project.projectDir as File, '/allure-report/ui/history')
    into new File(project.projectDir as File, '/allure-report/results/history')
}

clean {
    if (!System.getenv('CI')) {
        delete "$projectDir/allure-report"
        delete "$projectDir/allure-results"
    }
}
//exe rule
//tasks.test.dependsOn 'clean', 'build', 'createReportDir'
tasks.build.mustRunAfter 'clean'
tasks.test.finalizedBy('allureReport')
